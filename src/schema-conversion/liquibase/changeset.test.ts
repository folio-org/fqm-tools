import { EntityTypeGenerationConfig, EntityTypeGenerationConfigSource } from '@/types';
import { describe, expect, it } from 'bun:test';
import createLiquibaseChangeset, { disambiguateSource } from './changeset';

describe('createLiquibaseChangeset', () => {
  it('generates a valid Liquibase changeset', () => {
    const source: EntityTypeGenerationConfigSource = {
      name: 'test_view',
      table: 'test_table',
    };

    const config = {
      metadata: {
        module: 'mod-test',
        team: 'test-team',
        domain: 'erm',
      },
    } as EntityTypeGenerationConfig;

    const result = createLiquibaseChangeset(source, config);

    expect(result).toEqual({
      databaseChangeLog: [
        {
          changeSet: {
            id: 'create_view__test_view',
            author: 'generated--test-team--mod-test',
            runAlways: true,
            preConditions: {
              onFail: 'CONTINUE',
              preCondition: [
                {
                  tableExists: {
                    tableName: 'test_table',
                    schemaName: '${tenant_id}_mod_test'.replaceAll('-', '_'),
                  },
                },
              ],
            },
            createView: {
              replaceIfExists: true,
              viewName: 'test_view',
              selectQuery: 'SELECT * FROM ${tenant_id}_${tenant_id}_mod_test.test_table'.replaceAll('-', '_'),
              remarks: expect.stringContaining('Generated by fqm-tools for mod-test (test-team)'),
            },
          },
        },
      ],
    });
  });
});

describe('disambiguateSource', () => {
  it('disambiguates source name with metadata', () => {
    const source: EntityTypeGenerationConfigSource = {
      name: 'test_view',
      table: 'test_table',
    };

    const config = {
      metadata: {
        module: 'mod-test-storage',
        team: 'test-team',
        domain: 'erm',
      },
    } as EntityTypeGenerationConfig;

    const result = disambiguateSource(source, config);

    expect(result).toEqual({
      name: 'src__erm__test_storage__test_table',
      table: 'test_table',
    });
  });
});
