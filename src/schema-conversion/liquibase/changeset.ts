import { EntityTypeGenerationConfig, EntityTypeGenerationConfigSource } from '@/types';
import debug from 'debug';

const log = {
  debug: debug('fqm-tools:liquibase:debug'),
  warn: debug('fqm-tools:liquibase:warn'),
};

export default function createLiquibaseChangeset(
  source: EntityTypeGenerationConfigSource,
  config: EntityTypeGenerationConfig,
) {
  const schemaName = `$\{tenant_id}_${config.metadata.module}`.replaceAll('-', '_');

  const preCondition = [];
  let selectQuery = '';

  if ('table' in source) {
    selectQuery = `SELECT * FROM ${schemaName}.${source.table}`;
    preCondition.push({
      tableExists: {
        tableName: source.table,
        schemaName,
      },
    });
  } else {
    selectQuery = source.sql;
  }

  return {
    databaseChangeLog: [
      {
        changeSet: {
          id: `create_view__${source.name}`,
          author: `generated--${config.metadata.team}--${config.metadata.module}`,
          runAlways: true,
          preConditions: [
            {
              onFail: 'CONTINUE',
            },
            ...preCondition,
          ],
          changes: [
            {
              createView: {
                replaceIfExists: true,
                viewName: source.name,
                selectQuery,
                remarks: `Generated by fqm-tools for ${config.metadata.module} (${config.metadata.team})`,
              },
            },
          ],
        },
      },
    ],
  };
}

export function disambiguateSource(source: EntityTypeGenerationConfigSource, config: EntityTypeGenerationConfig) {
  const table = 'table' in source ? source.table : source.name;
  const { module, domain } = config.metadata;

  const shortenedModuleName = module.replace('mod-', '');
  const disambiguatedName = `src__${domain}__${shortenedModuleName}__${table}`.replaceAll('-', '_');

  log.debug('mapped module %o source %o to %o', config.metadata.module, source.name, disambiguatedName);

  return {
    ...source,
    name: disambiguatedName,
  };
}
